{"version":3,"file":"jaxy.min.js","sources":["../src/jaxy.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module    local_syllabusuploader\n * @copyright  2023 onwards LSU Online & Continuing Education\n * @copyright  2023 onwards Tim Hunt, Robert Russo, David Lowe\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/ajax',],\n    function($, Ajax) {\n    'use strict';\n    return {\n        /**\n         * Quick check to see if the data chunk is array or object.\n         *\n         * @param {object} val or array\n         * @return bool - If true then it's array or obj\n         */\n        isAorO: function(val) {\n            return val instanceof Array || val instanceof Object ? true : false;\n        },\n\n        /**\n         * AJAX method to access the external services for Cross Enrollment\n         *\n         * @param {object} params The request arguments.\n         * Format to make calls is:\n         *      'call': [the function name],\n                'params': data you want to pass in JSON format,\n                'class': [class name AND file name, should match]\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        SUjax: function(params) {\n            var promiseObj = new Promise(function(resolve, reject) {\n                var send_this = [{\n                    methodname: 'local_syllabusuploader_sujax',\n                    args: {\n                        datachunk: params,\n                    }\n                }];\n\n                Ajax.call(send_this)[0].then(function(response) {\n                    resolve(JSON.parse(response.data));\n                }).catch(function(ev) {\n                    reject(ev);\n                });\n            });\n            return promiseObj;\n        },\n\n        /**\n         * AJAX method to access the remote Moodle instances.\n         * Going to use default jQuery ajax, not Moodles, for more control.\n         *\n         * @param {object} params The request arguments.\n         * Format to make calls is:\n         *      type: GET or POST,\n                data: {\n                    wstoken: x\n                    wsfunction: x\n                    moodlewsrestformat: x\n                },\n                url: domain + '/webservice/rest/server.php',\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        SURemoteAjax: function(params) {\n            // var that = this;\n            var promiseObj = new Promise(function(resolve) {\n                $.ajax({\n                    type: params.type,\n                    data: params.data,\n                    url: params.url,\n                }).done(function (response) {\n                    // If token is incorrect Moodle will throw an exception.\n                    if (response.hasOwnProperty('exception')) {\n                        resolve({\n                            'success': false,\n                            'msg': response.message\n                        });\n                    } else {\n                        // Need to handle the response. If the request is for Moodle Core\n                        // then the response is an array or object (isAorO).\n                        // otherwise it's a stringified JSON object.\n                        // if (that.isAorO(response)) {\n                        if (response instanceof Array || response instanceof Object) {\n                        // if (that.isAorO(response)) {\n                            resolve(response);\n                        } else {\n                            resolve(JSON.parse(response.data));\n                        }\n                    }\n                }).fail(function ( jqXHR, textStatus, errorThrown ) {\n                    console.log(jqXHR);\n                    console.log(textStatus);\n                    console.log(errorThrown);\n                    resolve({\n                        'success': false,\n                        'msg': \"Could not connect to the server.\"\n                    });\n                });\n            });\n            return promiseObj;\n        },\n    };\n});\n"],"names":["define","$","Ajax","isAorO","val","Array","Object","SUjax","params","Promise","resolve","reject","send_this","methodname","args","datachunk","call","then","response","JSON","parse","data","catch","ev","SURemoteAjax","ajax","type","url","done","hasOwnProperty","message","fail","jqXHR","textStatus","errorThrown","console","log"],"mappings":";;;;;;AAsBAA,qCAAO,CAAC,SAAU,cACd,SAASC,EAAGC,YAEL,CAOHC,OAAQ,SAASC,YACNA,eAAeC,OAASD,eAAeE,QAalDC,MAAO,SAASC,eACK,IAAIC,SAAQ,SAASC,QAASC,YACvCC,UAAY,CAAC,CACbC,WAAY,+BACZC,KAAM,CACFC,UAAWP,UAInBN,KAAKc,KAAKJ,WAAW,GAAGK,MAAK,SAASC,UAClCR,QAAQS,KAAKC,MAAMF,SAASG,UAC7BC,OAAM,SAASC,IACdZ,OAAOY,WAqBnBC,aAAc,SAAShB,eAEF,IAAIC,SAAQ,SAASC,SAClCT,EAAEwB,KAAK,CACHC,KAAMlB,OAAOkB,KACbL,KAAMb,OAAOa,KACbM,IAAKnB,OAAOmB,MACbC,MAAK,SAAUV,UAEVA,SAASW,eAAe,aACxBnB,QAAQ,UACO,MACJQ,SAASY,UAShBpB,QAFAQ,oBAAoBb,OAASa,oBAAoBZ,OAEzCY,SAEAC,KAAKC,MAAMF,SAASG,UAGrCU,MAAK,SAAWC,MAAOC,WAAYC,aAClCC,QAAQC,IAAIJ,OACZG,QAAQC,IAAIH,YACZE,QAAQC,IAAIF,aACZxB,QAAQ,UACO,MACJ"}