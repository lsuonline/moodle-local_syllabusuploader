{"version":3,"file":"notifications.min.js","sources":["../src/notifications.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @modual    local_syllabusuploader\n * @copyright  2023 onwards LSU Online & Continuing Education\n * @copyright  2023 onwards Tim Hunt, Robert Russo, David Lowe\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n define(['jquery', 'core/notification', 'core/modal_factory', 'core/modal_events'],\n    function($, notification, MF, ME) {\n    'use strict';\n\n    return {\n\n        /**\n         * Confirmation window to SAVE or CANCEL\n         * Type can be either: success, warning, info, error\n         * @param {obj} params A simple object with the 'message' and 'type' of notification.\n         * @return void\n         */\n        callYesNoModi: function(params) {\n            var this_data = params;\n            var promiseObj = new Promise(function (resolve) {\n\n                MF.create({\n                    type: MF.types.SAVE_CANCEL,\n                    title: this_data.title,\n                    body: this_data.body\n                })\n                .then(function(modal) {\n                    modal.setSaveButtonText(this_data.save_button);\n                    var root = modal.getRoot();\n                    root.on(ME.save, function() {\n                        resolve({\"status\": true, \"data\": this_data});\n                    });\n                    modal.show();\n                });\n            });\n            return promiseObj;\n        },\n\n        /**\n         * A simple way to call the Moodle core notification system.\n         * Type can be either: success, warning, info, error\n         *  Example:\n         *  noti.callNoti({\n         *      message: \"This is a success test\",\n         *      type: \"success\"\n         *  });\n         * @param {obj} params A simple object with the 'message' and 'type' of notification.\n         * @return void\n         */\n        callNoti: function(params) {\n            if (!params.hasOwnProperty('message')) {\n                console.log(\"ERROR -> Notification was called but with no message, aborting.\");\n            }\n            if (!params.hasOwnProperty('type')) {\n                // default to info\n                params.type = \"info\";\n            }\n            notification.addNotification(params);\n        },\n\n        /**\n         * An alert using the Moodle core notification system.\n         * Type can be either: success, warning, info, error\n         *  Example:\n         *  noti.callNoti({\n         *      title: \"Hello\",\n         *      message: \"This is an alert\",\n         *  });\n         * @param {obj} params A simple object with the 'message' and 'type' of notification.\n         * @return void\n         */\n        callAlert: function(params) {\n            if (!params.hasOwnProperty('title')) {\n                console.log(\"ERROR -> An alert was called but with no message, aborting.\");\n            }\n\n            notification.addNotification(params);\n        },\n\n        /**\n         * Store the reponse object to showcase a message after page reload.\n         * @param {obj} params Server Response {'success', 'data', 'msg'}\n         *\n         * @return void\n         */\n        storeMsg: function(params) {\n            // Save params to sessionStorage\n            sessionStorage.setItem('sent_delete_success', params.success);\n            sessionStorage.setItem('sent_delete_msg', params.msg);\n        },\n\n        /**\n         *  If a message is stored then show the notification and remove it.\n         * @return void\n         */\n        showMsg: function() {\n            // Save data to sessionStorage\n            if (sessionStorage.getItem('sent_delete_msg')) {\n                this.callNoti({\n                    message: sessionStorage.getItem('sent_delete_msg'),\n                    type: sessionStorage.getItem('sent_delete_success')\n                });\n                // Remove saved data from sessionStorage\n                sessionStorage.removeItem('sent_delete_msg');\n                sessionStorage.removeItem('sent_delete_success');\n            }\n        }\n    };\n});\n"],"names":["define","$","notification","MF","ME","callYesNoModi","params","this_data","Promise","resolve","create","type","types","SAVE_CANCEL","title","body","then","modal","setSaveButtonText","save_button","getRoot","on","save","show","callNoti","hasOwnProperty","console","log","addNotification","callAlert","storeMsg","sessionStorage","setItem","success","msg","showMsg","getItem","message","removeItem"],"mappings":";;;;;;AAsBCA,8CAAO,CAAC,SAAU,oBAAqB,qBAAsB,sBAC1D,SAASC,EAAGC,aAAcC,GAAIC,UAGvB,CAQHC,cAAe,SAASC,YAChBC,UAAYD,cACC,IAAIE,SAAQ,SAAUC,SAEnCN,GAAGO,OAAO,CACNC,KAAMR,GAAGS,MAAMC,YACfC,MAAOP,UAAUO,MACjBC,KAAMR,UAAUQ,OAEnBC,MAAK,SAASC,OACXA,MAAMC,kBAAkBX,UAAUY,aACvBF,MAAMG,UACZC,GAAGjB,GAAGkB,MAAM,WACbb,QAAQ,SAAW,OAAcF,eAErCU,MAAMM,cAiBlBC,SAAU,SAASlB,QACVA,OAAOmB,eAAe,YACvBC,QAAQC,IAAI,mEAEXrB,OAAOmB,eAAe,UAEvBnB,OAAOK,KAAO,QAElBT,aAAa0B,gBAAgBtB,SAcjCuB,UAAW,SAASvB,QACXA,OAAOmB,eAAe,UACvBC,QAAQC,IAAI,+DAGhBzB,aAAa0B,gBAAgBtB,SASjCwB,SAAU,SAASxB,QAEfyB,eAAeC,QAAQ,sBAAuB1B,OAAO2B,SACrDF,eAAeC,QAAQ,kBAAmB1B,OAAO4B,MAOrDC,QAAS,WAEDJ,eAAeK,QAAQ,0BAClBZ,SAAS,CACVa,QAASN,eAAeK,QAAQ,mBAChCzB,KAAMoB,eAAeK,QAAQ,yBAGjCL,eAAeO,WAAW,mBAC1BP,eAAeO,WAAW"}